#!/usr/bin/env bash

# adapted from https://github.com/junegunn/fzf/blob/master/ADVANCED.md#using-fzf-as-interactive-ripgrep-launcher

## Interactive Ripgrep
# on 'Enter' open the file in less
# Switch between Ripgrep mode and fzf filtering mode (Ctrl+T)
# Nested search with (Ctrl+F)

## Usage
# rgf [options] file search_words/regexes...
#
# `rgf` similar to `rg | fzf`, search through all files
# `rgf [filename]` search in a file, similar to `less`
# `CMD | rgf` pipe the output of CMD to `rgf`

## Prerequisite
# rg: https://github.com/BurntSushi/ripgrep
# fzf: https://github.com/junegunn/fzf
# bat: https://github.com/sharkdp/bat
# companion script fzf_previewer

## known issue
# 1. ctrl-F no response, this can happen when the number of records is too large. Try to apply more fileters to reduce the searching pool
# 2. in nested search mode, rg will match filename, while it is possible to manipulate the regex to skip filename:line_num, I decided to
#    keep this behaviour to provide the ability to filter over filenames


KEY_BINDING=$(cat << EOF
key-bindings:
    F1                    Help
    Ctrl+Space            Toggle between rg and fzf
    Ctrl+F                Search in current mattching records, could fail if the number of records is too large
    F12                   Search in file context. You can choose a line in the context and perform a search against the selected line
    Ctrl+/                Change preview window position or close it
    Ctrl+D                Clear query
    Enter                 Use 'less' or Vscode to peek the current record
    Alt-Enter             Print the selected records to CLI
    Alt+Left / Alt+Right  Go to the begining / end of query prompt
    Alt+Up / Alt+down     Scroll preview window

EOF
)

show_help() {
    cat << EOF
Interactive Ripgrep / FZF

usage:
rgf [options] file patterns...  # both file and pattern are optional
rgf [options] patterns...       # if the first positional parameter is not a file, it will be treated as part of the pattern
CMD | rgf [options]             # can also use from pipe

In rg mode, you can use '!' to invert the search, e.g., rg> !foo will match anything but foo


options:
    -h|--help       display this help message

    --rg            start in rg mode, default start up mode is fzf

    --header [n]    freeze the first n line in preview window as header, n is default to 1 when not provided,
                    e.g., 'ps -ef | rgf --header' freezes the first line in preview to provide column information
                    a convenient shothand for fzf's --header-lines option

    -s|--silent     useful when you want to pipe the search result to other command,
                    by default, rgf prints out the searching pattern or peeking file path to provide a trace

Other options are passed to the underlying rg and fzf
!! IMPORTANT: for key-value options, use opt=value or the script may fail
Note that fzf performs search on top of rg's result, thus --glob / --type will affect the searching pool for both fzf and rg
but some other options such as rg's "--fixed-strings" will have no effect on fzf. Generally, fzf's options will not affect rg
    -z-*| -z--*      fzf options, e.g., rgf -z+i => fzf +i # fzf case sensitive mode, see man fzf
    -*|--*           rg options, e.g., rgf --glob='*.c' # glob will be parsed by rg, see man rg

EOF
    echo "$KEY_BINDING"
    echo
    exit 0
}

PASS_THROUGH_OPT=''
SILENT=''
FZF_OPT=""
RG_PREFIX="rg --line-number --no-heading --color=always --smart-case"
NOT_FOUND_MSG="[[ regex:/\$FZF_QUERY/ not found ]]"
PRETTY_BAT='bat --force-colorization --terminal-width $(tput cols) --paging=always'
BAT_STYLE='--style=grid,numbers,header'
PREVIEW_HEADER_LINE_FILE=',~3'
PREVIEW_HEADER_LINE_PIPE=''
PATTERN_SETUP="PATTERN=\$([ -z {q} ] && echo '' || [[ \$FZF_PROMPT =~ 'rg>' ]] && echo \"-p {q}\" | sed -E -e 's+\\\\d+[0-9]+g' || \
                echo \"-p \$(echo {q} | sed -E -e 's/\\s+/|/g' | sed -e 's/^|//; s/|$//')\")"
PROMPT_SETUP="PROMPT=\$([[ \$FZF_PROMPT =~ 'rg>' ]] && echo 'rg:' || echo 'fzf:') "
PREFIX_SETUP="$PROMPT_SETUP ; new_prefix=\$([ -z {q} ] && echo '' || echo [{q}]) ; echo \$PROMPT {q} "
TRUNCATE_LINE="awk '{ if (length(\$0) > 201) print substr(\$0, 1, 201) \" [...]\"; else print \$0; }'"
PREVIEW_FILE='{1}'
LINE_NUM='{2}'
N_TH='3..'
HINT='Ctrl-Space: toggle rg/fzf, Ctrl-F: nested search, F1: help'
CTX_SEARCH='FALSE'

# for --rg
IS_FZF_DISABLED=''
UNBIND_CHANGE='+unbind(change)'
START_PROMPT='fzf'
START_SEARCH="''"

# parse options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            show_help
            exit 0
            ;;
        --rg)
            PASS_THROUGH_OPT="$PASS_THROUGH_OPT --rg"
            IS_FZF_DISABLED='--disabled'
            UNBIND_CHANGE=''
            START_PROMPT='rg'
            START_SEARCH="{q}"
            shift
            ;;
        -s|--silent)
            PASS_THROUGH_OPT="$PASS_THROUGH_OPT -s"
            SILENT='>/dev/null'
            PREFIX_SETUP="$PREFIX_SETUP $SILENT"
            shift
            ;;
        --header)
            shift
            if [[ $2 =~ ^[0-9]+$ ]]; then
                ln=$2
                shift
            else
                ln=1
            fi
            PREVIEW_HEADER_LINE_PIPE=",~$((ln+1))"
            FZF_OPT="$FZF_OPT --header-lines $ln"
            ;;
        --PASS-THROUGH)
            PASS_THROUGH_FILE=$2
            shift 2
            ;;
        --PREFIX)
            prefix="$2 && "
            shift 2
            ;;
        --context-search)
            CTX_LINE=$2
            shift 2
            second_last=$(( $# - 1 ))
            CTX_FILE="${!second_last}"
            CTX_SEARCH='TRUE'
            [[ ! $CTX_FILE =~ "/tmp/rg-fzf-pipe-" ]] && CTX_FILE_LABEL="--border=top --border-label-pos=2 --border-label=File:$CTX_FILE"

            CTX_FZF_OPT="--preview-window=hidden --bind start:+unbind(ctrl-/,ctrl-f,f12,change,ctrl-space) --bind load:pos($CTX_LINE) --disabled --no-multi $CTX_FILE_LABEL"
            NAV_CHANGE_QUERY="+transform(echo \"change-query(\$(echo {2..}))\")"
            HINT="Edit line and hit Enter to search"
            START_PROMPT="select context"
            ;;
        -z-*|-z+*)
            FZF_OPT="$FZF_OPT ${1:2}" # remove -z part
            shift
            ;;
        -*)
            RG_PREFIX="$RG_PREFIX $1"
            shift
            ;;
        *)
            break
            ;;
    esac
done
set -- "$@"

PASS_THROUGH_FILE="${PASS_THROUGH_FILE:='//'}" # provide a default value

main() {

    local file_path=''
    [ -f "$1" ] && file_path="'$1'" && shift
    local context_file="${file_path:-'{1}'}"

    local EXECUTE_PEEK_FILE=""
    if [[ $CTX_SEARCH == 'TRUE' ]]; then
        EXECUTE_PEEK_FILE="become(echo {q})"
    else
        if [[ $TERM_PROGRAM == 'vscode' ]]; then
            # use vscode
            EXECUTE_PEEK_FILE="execute-silent([[ {} != '$NOT_FOUND_MSG' ]] && code -g $PREVIEW_FILE:$LINE_NUM && echo peek: {} $SILENT | $TRUNCATE_LINE)"
        else
            EXECUTE_PEEK_FILE="execute([[ {} != '$NOT_FOUND_MSG' ]] && $PATTERN_SETUP ; $PRETTY_BAT $PREVIEW_FILE --highlight-line $LINE_NUM --pager \"less -R +$LINE_NUM \$PATTERN\" 2>/dev/null && echo peek: {} $SILENT | $TRUNCATE_LINE)"
        fi
    fi

    rm -f /tmp/rg-fzf-{r,f}
    INITIAL_QUERY="${*:-}"
    : | fzf --ansi --query "$INITIAL_QUERY" \
        --layout=reverse-list \
        --exact --no-sort \
        --track \
        --pointer='=>' \
        --marker='# ' \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --multi \
        --delimiter : \
        --nth=$N_TH \
        \
        --prompt "${prefix}${START_PROMPT}> " \
        --header "$HINT" \
        \
        --bind "start:reload($RG_PREFIX $START_SEARCH $file_path || echo $NOT_FOUND_MSG)$UNBIND_CHANGE" \
        --bind "change:reload:sleep 0.1; ([[ {q} =~ ^! ]] && $RG_PREFIX -v \"\$(echo {q} | sed -E -e 's/^!//')\" $file_path || $RG_PREFIX {q} $file_path) || echo $NOT_FOUND_MSG" \
        \
        --bind "home:first" \
        --bind "end:last" \
        --bind 'ctrl-/:change-preview-window(up,50%,border-bottom|right,50%,border-left|hidden|)' \
        --bind "ctrl-space:transform:[[ ! \$FZF_PROMPT =~ 'rg>' ]] &&
                echo \"disable-search+rebind(change)+reload($RG_PREFIX \\{q} $file_path || echo $NOT_FOUND_MSG)+change-prompt(${prefix}rg> )\" ||
                echo \"unbind(change)+reload($RG_PREFIX '' $file_path )+change-prompt(${prefix}fzf> )+enable-search\" " \
        --bind "ctrl-f:select-all+execute($PREFIX_SETUP ; printf '%s\n' {+} | rgf --PREFIX \"${prefix}\$new_prefix\" --PASS-THROUGH $PASS_THROUGH_FILE $PASS_THROUGH_OPT )+clear-selection" \
        --bind "ctrl-d:clear-query" \
        --bind "f1:execute:echo \"$KEY_BINDING\" | less" \
        --bind "f12:execute(CTX_QUERY=\$(rgf --context-search $LINE_NUM --PASS-THROUGH $PASS_THROUGH_FILE $PASS_THROUGH_OPT $context_file {$N_TH}) && rgf --PREFIX '((context search))' --PASS-THROUGH $PASS_THROUGH_FILE $PASS_THROUGH_OPT $file_path \$CTX_QUERY)" \
        --bind "alt-left:beginning-of-line,alt-right:end-of-line" \
        --bind "alt-up:preview-up,alt-down:preview-down" \
        \
        --preview "bat $BAT_STYLE --terminal-width \$FZF_PREVIEW_COLUMNS --force-colorization $PREVIEW_FILE --highlight-line $LINE_NUM 2>/dev/null || fzf_previewer {}" \
        --preview-window "up,80%,border-bottom,wrap,+$LINE_NUM+3/3$PREVIEW_HEADER_LINE_FILE" \
        \
        --bind "enter:$EXECUTE_PEEK_FILE" \
        --bind "alt-enter:become( [[ $PASS_THROUGH_FILE == '//' ]] && printf '%s\n' {+1..2} || printf '%s\n' {+2..} )" \
        $IS_FZF_DISABLED \
        $CTX_FZF_OPT \
        --bind "up:up$NAV_CHANGE_QUERY" --bind "down:down$NAV_CHANGE_QUERY" \
        $FZF_OPT \

} # end of main()


if [[ $CTX_SEARCH == 'TRUE' ]]; then

    BAT_STYLE="--style=grid,numbers"
    LINE_NUM='{1}'
    N_TH='2..'
    main "$@"

elif ! [ -p /dev/stdin ]; then

    # Run from cli
    [ -f "$1" ] && RG_PREFIX="$RG_PREFIX --with-filename"
    main "$@"

else

    # Run from pipeline
    TEMP_FILE="/tmp/rg-fzf-pipe-$$"
    rm -f $TEMP_FILE
    cat > $TEMP_FILE

    if [[ "$PASS_THROUGH_FILE" == '//' ]]; then
        # run in nested search mode
        RG_PREFIX="$RG_PREFIX --no-filename --no-heading --no-line-number"
    else
        if [[ "$PASS_THROUGH_FILE" =~ "/tmp/rg-fzf-pipe-" ]]; then
            # nested search mode when top level is pipe input
            RG_PREFIX="$RG_PREFIX --no-filename --no-heading --no-line-number"
        else
            # top level entry with input from pipe
            PASS_THROUGH_FILE="$TEMP_FILE"
        fi
        # common when top level is pipe
        BAT_STYLE="--style=grid,numbers"
        PREVIEW_HEADER_LINE_FILE="$PREVIEW_HEADER_LINE_PIPE"
        PREVIEW_FILE="$PASS_THROUGH_FILE"
        LINE_NUM='{1}'
        N_TH='2..'
    fi

    main $TEMP_FILE "$@"
    rm -f $TEMP_FILE

fi

